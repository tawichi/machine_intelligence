 

畳み込み符号                                       16の
フート                                      閲覧 編集 履歴示示 ツールマン

 

出典: フリー百科事典『ウィキペディア (Wikipedia) 』

この記事は検証可能な参考文献や出典が全く示されていないか、不十分です。 出典を追加して記事の信頼性向

上にご協力ください。 (このテンプレートの使い方)
 *号み込み符号" - ニュース・書穫・スカラー・CiNii ・}-STAGE・ NDL・ diibjp・ジャパンサーチ・TwL (2022年3

時み込み符号 (たたみこみふごう、甘: Convolutional code) は、 電気通信における諾り訂正符号の一種である。
1955年にマサチューセッツ科大学のビーター・イライアスが提案したもので、一定長さ(拘束長)のビット列から順次断たなビット列を生成
することで符号化する。 対照的な方法にブロック符号がある。

符号化の基本動作 (WW

図1は最も簡易な畳み込み符号器の一例を示す。ごれは入力1ビットを3ビットに変換出力す            GTD

 

 

 

 

 

 

 

 

 

 

 

>の >の am
るもので、直近で入力された3ビットを記憶する義村を含む。                                           4
一般に畳み込み符号では以下の用語・記呈で性能を表現する。                                ォョ 。語軒展
・符号化放 r: 入力ビット長と出力ビット長の比。 のビットから7ビットへの竣換(ヵ > )                           しっ >
では7 7i/7となる。                                                                                  *
・拘束長 ん: 洒算に用いる直近の入力ビットの長さ (constraint length)。                                     on とま一wm
。自由兄 : 符号の訂正能力を表す (fee distance)。 詳細は後。                     図1. 符号化率 1/3、拘東長 3 の非再帰・非組 品
織的畳み込み符号器

ここでは、符号化率 7 王 1/3、拘東長た王 3となる。
符号器には、1ビピットを入力保持できる ん 個のメモリレジスタを用意する。各メモリレジスタの初期値は 0 とする。また、対の加算器と生
成多項式があり、それぞれ2を法として演算する。
まず、入力ビット ni は左端のレジスタに格納される。そして、各メモリレジスタの値から生成多項式を適用して 。 ビットを出力する。ごの
例では、生成多項式は で ー (1, 1 1)で5 = (0,1,1), Cs 王 (1,0,1) であり、出力ビットは次のように計算される (2 を法とする) 。
・ロューのュキ 70キカコ
・72 = moキのエ
・7a ニュキのユエ
次に、全レジスタ値を右方向にビットシフトし (7」 を 7 に移し、7o を 7-1 に移す) 、次の入力ビットを待つ。 これを反復し、新た
な入力ビットがない場合、全てのレジスタがゼロ状態になるまで出力を続ける。

再帰的な実装 [入信]

図1で示したものは非再帰的な符号器である。一方で、図2に示すように再帰的なものもあ
る。

また、ごの図では「出力2」として符号化対象の入力がそのまま出力されている。ごこのような
符号は組織的(systematic)であるといい、そうでない符号を非組織的(non-systematic)であ
るという。

一般に、再帰的符号は組織的であり、逆に非再帰的符号は非組織的である。そうでない実装
も可能であるが、そのようになっているごとが多い。

 

 

 

 

 

 

 

 

 

 

数学的表現
